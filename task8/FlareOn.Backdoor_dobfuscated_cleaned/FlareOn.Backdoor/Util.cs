using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

namespace FlareOn.Backdoor
{
	// Token: 0x02000026 RID: 38
	public static class Util
	{
		// Token: 0x060000A1 RID: 161 RVA: 0x00005954 File Offset: 0x0000C954
		public static void flare_74()
		{
			Util.d_b = new List<byte>
			{
				0,
				32,
				0,
				1,
				0,
				0,
				141,
				156,
				34,
				201,
				177,
				19,
				5,
				32,
				0,
				1,
				0,
				0,
				141,
				108,
				156,
				46,
				78,
				19,
				6,
				3,
				142,
				105,
				141,
				183,
				142,
				189,
				14,
				19,
				7,
				22,
				11,
				43,
				22,
				0,
				17,
				5,
				7,
				2,
				7,
				2,
				142,
				105,
				93,
				145,
				158,
				17,
				6,
				7,
				7,
				158,
				0,
				7,
				23,
				88,
				11,
				7,
				32,
				0,
				1,
				0,
				0,
				254,
				4,
				19,
				8,
				17,
				8,
				45,
				220,
				22,
				37,
				11,
				12,
				43,
				44,
				0,
				8,
				17,
				6,
				7,
				148,
				88,
				17,
				5,
				7,
				148,
				88,
				32,
				0,
				1,
				0,
				0,
				93,
				12,
				17,
				6,
				7,
				148,
				19,
				4,
				17,
				6,
				7,
				17,
				6,
				8,
				148,
				158,
				17,
				6,
				8,
				17,
				4,
				158,
				0,
				7,
				23,
				88,
				11,
				7,
				32,
				0,
				1,
				0,
				0,
				254,
				4,
				19,
				9,
				17,
				9,
				45,
				198,
				22,
				37,
				11,
				37,
				12,
				10,
				43,
				82,
				0,
				6,
				23,
				88,
				10,
				6,
				32,
				0,
				1,
				0,
				0,
				93,
				10,
				8,
				17,
				6,
				6,
				148,
				88,
				12,
				8,
				32,
				0,
				1,
				0,
				0,
				93,
				12,
				17,
				6,
				6,
				148,
				19,
				4,
				17,
				6,
				6,
				17,
				6,
				8,
				148,
				158,
				17,
				6,
				8,
				17,
				4,
				158,
				17,
				6,
				17,
				6,
				6,
				148,
				17,
				6,
				8,
				148,
				88,
				32,
				0,
				1,
				0,
				0,
				93,
				148,
				13,
				17,
				7,
				7,
				3,
				7,
				145,
				9,
				97,
				210,
				156,
				0,
				7,
				23,
				88,
				11,
				7,
				3,
				142,
				105,
				254,
				4,
				19,
				10,
				17,
				10,
				45,
				162,
				17,
				7,
				19,
				11,
				43,
				0,
				17,
				11,
				42
			}.ToArray();
			Util.gs_b = new List<byte>
			{
				0,
				40,
				177,
				233,
				70,
				138,
				111,
				84,
				62,
				97,
				100,
				10,
				115,
				99,
				46,
				50,
				30,
				11,
				6,
				40,
				248,
				253,
				205,
				90,
				0,
				20,
				12,
				6,
				25,
				23,
				115,
				210,
				51,
				253,
				56,
				13,
				0,
				0,
				7,
				111,
				84,
				127,
				124,
				206,
				19,
				4,
				22,
				19,
				5,
				43,
				91,
				17,
				4,
				17,
				5,
				163,
				5,
				132,
				47,
				138,
				19,
				6,
				0,
				2,
				17,
				6,
				123,
				179,
				165,
				243,
				215,
				115,
				197,
				113,
				201,
				222,
				111,
				172,
				110,
				73,
				182,
				19,
				7,
				17,
				7,
				44,
				48,
				0,
				17,
				6,
				123,
				45,
				81,
				63,
				198,
				141,
				57,
				101,
				183,
				1,
				12,
				9,
				17,
				6,
				123,
				135,
				50,
				200,
				128,
				110,
				22,
				111,
				243,
				154,
				196,
				129,
				38,
				9,
				8,
				22,
				17,
				6,
				123,
				112,
				138,
				142,
				133,
				111,
				50,
				254,
				127,
				75,
				38,
				43,
				15,
				0,
				17,
				5,
				23,
				88,
				19,
				5,
				17,
				5,
				17,
				4,
				142,
				105,
				50,
				157,
				0,
				222,
				11,
				9,
				44,
				7,
				9,
				111,
				228,
				7,
				120,
				63,
				0,
				220,
				8,
				19,
				8,
				43,
				0,
				17,
				8,
				42
			}.ToArray();
			Util.cl_b = new List<byte>
			{
				0,
				115,
				10,
				217,
				189,
				252,
				37,
				31,
				88,
				22,
				111,
				13,
				114,
				68,
				205,
				0,
				37,
				32,
				214,
				0,
				0,
				0,
				22,
				111,
				41,
				222,
				199,
				79,
				0,
				37,
				32,
				215,
				0,
				0,
				0,
				22,
				111,
				191,
				122,
				21,
				244,
				0,
				37,
				31,
				95,
				22,
				111,
				35,
				35,
				46,
				22,
				0,
				37,
				32,
				0,
				254,
				0,
				0,
				22,
				111,
				225,
				100,
				53,
				248,
				0,
				37,
				31,
				59,
				25,
				111,
				109,
				217,
				171,
				203,
				0,
				37,
				31,
				46,
				24,
				111,
				215,
				70,
				221,
				19,
				0,
				37,
				31,
				60,
				25,
				111,
				4,
				158,
				149,
				64,
				0,
				37,
				31,
				47,
				24,
				111,
				25,
				231,
				234,
				34,
				0,
				37,
				31,
				65,
				25,
				111,
				143,
				165,
				87,
				55,
				0,
				37,
				31,
				52,
				24,
				111,
				155,
				197,
				51,
				76,
				0,
				37,
				31,
				61,
				25,
				111,
				96,
				22,
				251,
				78,
				0,
				37,
				31,
				48,
				24,
				111,
				69,
				229,
				128,
				170,
				0,
				37,
				31,
				66,
				25,
				111,
				154,
				51,
				85,
				53,
				0,
				37,
				31,
				53,
				24,
				111,
				53,
				224,
				204,
				216,
				0,
				37,
				31,
				62,
				25,
				111,
				147,
				59,
				228,
				160,
				0,
				37,
				31,
				49,
				24,
				111,
				184,
				149,
				252,
				94,
				0,
				37,
				31,
				67,
				25,
				111,
				216,
				133,
				125,
				167,
				0,
				37,
				31,
				54,
				24,
				111,
				69,
				133,
				125,
				175,
				0,
				37,
				31,
				63,
				25,
				111,
				181,
				175,
				116,
				254,
				0,
				37,
				31,
				50,
				24,
				111,
				52,
				113,
				206,
				33,
				0,
				37,
				31,
				68,
				25,
				111,
				28,
				157,
				210,
				36,
				0,
				37,
				31,
				55,
				24,
				111,
				83,
				132,
				241,
				166,
				0,
				37,
				31,
				64,
				25,
				111,
				192,
				135,
				220,
				183,
				0,
				37,
				31,
				51,
				24,
				111,
				40,
				189,
				13,
				10,
				0,
				37,
				32,
				140,
				0,
				0,
				0,
				23,
				111,
				45,
				74,
				180,
				126,
				0,
				37,
				31,
				56,
				25,
				111,
				178,
				206,
				222,
				253,
				0,
				37,
				31,
				43,
				24,
				111,
				89,
				7,
				209,
				223,
				0,
				37,
				23,
				22,
				111,
				161,
				42,
				72,
				168,
				0,
				37,
				31,
				57,
				25,
				111,
				239,
				119,
				133,
				182,
				0,
				37,
				31,
				44,
				24,
				111,
				221,
				200,
				46,
				220,
				0,
				37,
				31,
				58,
				25,
				111,
				180,
				123,
				177,
				17,
				0,
				37,
				31,
				45,
				24,
				111,
				28,
				204,
				83,
				4,
				0,
				37,
				31,
				40,
				23,
				111,
				85,
				168,
				6,
				75,
				0,
				37,
				31,
				41,
				23,
				111,
				133,
				90,
				142,
				129,
				0,
				37,
				31,
				111,
				23,
				111,
				214,
				87,
				16,
				90,
				0,
				37,
				31,
				116,
				23,
				111,
				166,
				53,
				216,
				178,
				0,
				37,
				32,
				1,
				254,
				0,
				0,
				22,
				111,
				14,
				203,
				241,
				219,
				0,
				37,
				32,
				2,
				254,
				0,
				0,
				22,
				111,
				215,
				91,
				107,
				29,
				0,
				37,
				32,
				3,
				254,
				0,
				0,
				22,
				111,
				205,
				189,
				105,
				145,
				0,
				37,
				32,
				195,
				0,
				0,
				0,
				22,
				111,
				184,
				209,
				101,
				109,
				0,
				37,
				32,
				4,
				254,
				0,
				0,
				22,
				111,
				13,
				158,
				52,
				141,
				0,
				37,
				32,
				5,
				254,
				0,
				0,
				22,
				111,
				41,
				103,
				13,
				231,
				0,
				37,
				32,
				22,
				254,
				0,
				0,
				23,
				111,
				86,
				54,
				71,
				173,
				0,
				37,
				32,
				211,
				0,
				0,
				0,
				22,
				111,
				115,
				79,
				239,
				209,
				0,
				37,
				31,
				103,
				22,
				111,
				35,
				116,
				37,
				194,
				0,
				37,
				31,
				104,
				22,
				111,
				143,
				130,
				251,
				60,
				0,
				37,
				31,
				105,
				22,
				111,
				1,
				201,
				22,
				221,
				0,
				37,
				31,
				106,
				22,
				111,
				232,
				239,
				157,
				239,
				0,
				37,
				32,
				212,
				0,
				0,
				0,
				22,
				111,
				11,
				143,
				46,
				32,
				0,
				37,
				32,
				138,
				0,
				0,
				0,
				22,
				111,
				9,
				85,
				212,
				115,
				0,
				37,
				32,
				179,
				0,
				0,
				0,
				22,
				111,
				147,
				239,
				71,
				241,
				0,
				37,
				32,
				130,
				0,
				0,
				0,
				22,
				111,
				218,
				57,
				122,
				211,
				0,
				37,
				32,
				181,
				0,
				0,
				0,
				22,
				111,
				231,
				152,
				32,
				159,
				0,
				37,
				32,
				131,
				0,
				0,
				0,
				22,
				111,
				103,
				39,
				166,
				7,
				0,
				37,
				32,
				183,
				0,
				0,
				0,
				22,
				111,
				249,
				73,
				14,
				8,
				0,
				37,
				32,
				132,
				0,
				0,
				0,
				22,
				111,
				33,
				169,
				220,
				140,
				0,
				37,
				32,
				185,
				0,
				0,
				0,
				22,
				111,
				15,
				15,
				152,
				213,
				0,
				37,
				32,
				133,
				0,
				0,
				0,
				22,
				111,
				137,
				22,
				219,
				66,
				0,
				37,
				32,
				213,
				0,
				0,
				0,
				22,
				111,
				239,
				100,
				234,
				200,
				0,
				37,
				32,
				139,
				0,
				0,
				0,
				22,
				111,
				111,
				38,
				70,
				15,
				0,
				37,
				32,
				180,
				0,
				0,
				0,
				22,
				111,
				116,
				213,
				65,
				92,
				0,
				37,
				32,
				134,
				0,
				0,
				0,
				22,
				111,
				1,
				17,
				80,
				243,
				0,
				37,
				32,
				182,
				0,
				0,
				0,
				22,
				111,
				252,
				158,
				242,
				151,
				0,
				37,
				32,
				135,
				0,
				0,
				0,
				22,
				111,
				203,
				124,
				102,
				178,
				0,
				37,
				32,
				184,
				0,
				0,
				0,
				22,
				111,
				172,
				78,
				2,
				71,
				0,
				37,
				32,
				136,
				0,
				0,
				0,
				22,
				111,
				185,
				233,
				192,
				33,
				0,
				37,
				32,
				186,
				0,
				0,
				0,
				22,
				111,
				0,
				231,
				123,
				13,
				0,
				37,
				32,
				137,
				0,
				0,
				0,
				22,
				111,
				45,
				111,
				167,
				149,
				0,
				37,
				31,
				118,
				22,
				111,
				201,
				84,
				196,
				111,
				0,
				37,
				31,
				107,
				22,
				111,
				55,
				30,
				68,
				64,
				0,
				37,
				31,
				108,
				22,
				111,
				104,
				222,
				55,
				57,
				0,
				37,
				32,
				224,
				0,
				0,
				0,
				22,
				111,
				119,
				208,
				234,
				17,
				0,
				37,
				32,
				210,
				0,
				0,
				0,
				22,
				111,
				35,
				151,
				152,
				151,
				0,
				37,
				32,
				209,
				0,
				0,
				0,
				22,
				111,
				64,
				196,
				90,
				148,
				0,
				37,
				31,
				109,
				22,
				111,
				168,
				byte.MaxValue,
				244,
				114,
				0,
				37,
				31,
				110,
				22,
				111,
				77,
				26,
				35,
				204,
				0,
				37,
				32,
				23,
				254,
				0,
				0,
				22,
				111,
				141,
				32,
				0,
				74,
				0,
				37,
				31,
				112,
				23,
				111,
				92,
				68,
				57,
				2,
				0,
				37,
				31,
				91,
				22,
				111,
				137,
				111,
				108,
				175,
				0,
				37,
				31,
				92,
				22,
				111,
				203,
				181,
				26,
				174,
				0,
				37,
				31,
				37,
				22,
				111,
				196,
				104,
				41,
				36,
				0,
				37,
				32,
				17,
				254,
				0,
				0,
				22,
				111,
				225,
				76,
				102,
				19,
				0,
				37,
				32,
				220,
				0,
				0,
				0,
				22,
				111,
				57,
				38,
				208,
				219,
				0,
				37,
				32,
				24,
				254,
				0,
				0,
				22,
				111,
				242,
				61,
				200,
				41,
				0,
				37,
				32,
				21,
				254,
				0,
				0,
				23,
				111,
				116,
				211,
				35,
				226,
				0,
				37,
				31,
				117,
				23,
				111,
				99,
				132,
				82,
				210,
				0,
				37,
				31,
				39,
				23,
				111,
				71,
				131,
				197,
				60,
				0,
				37,
				32,
				9,
				254,
				0,
				0,
				27,
				111,
				65,
				65,
				91,
				181,
				0,
				37,
				24,
				22,
				111,
				239,
				240,
				133,
				104,
				0,
				37,
				25,
				22,
				111,
				137,
				180,
				186,
				158,
				0,
				37,
				26,
				22,
				111,
				28,
				108,
				85,
				37,
				0,
				37,
				27,
				22,
				111,
				153,
				103,
				byte.MaxValue,
				59,
				0,
				37,
				31,
				14,
				26,
				111,
				116,
				211,
				208,
				34,
				0,
				37,
				32,
				10,
				254,
				0,
				0,
				27,
				111,
				80,
				216,
				189,
				127,
				0,
				37,
				31,
				15,
				26,
				111,
				69,
				206,
				177,
				38,
				0,
				37,
				31,
				32,
				28,
				111,
				22,
				221,
				217,
				159,
				0,
				37,
				31,
				22,
				22,
				111,
				30,
				116,
				99,
				248,
				0,
				37,
				31,
				23,
				22,
				111,
				254,
				161,
				173,
				200,
				0,
				37,
				31,
				24,
				22,
				111,
				54,
				201,
				38,
				159,
				0,
				37,
				31,
				25,
				22,
				111,
				45,
				58,
				149,
				36,
				0,
				37,
				31,
				26,
				22,
				111,
				150,
				117,
				142,
				88,
				0,
				37,
				31,
				27,
				22,
				111,
				221,
				184,
				133,
				95,
				0,
				37,
				31,
				28,
				22,
				111,
				219,
				66,
				147,
				246,
				0,
				37,
				31,
				29,
				22,
				111,
				97,
				158,
				84,
				37,
				0,
				37,
				31,
				30,
				22,
				111,
				216,
				145,
				132,
				134,
				0,
				37,
				31,
				21,
				22,
				111,
				245,
				171,
				121,
				202,
				0,
				37,
				31,
				31,
				26,
				111,
				211,
				169,
				172,
				36,
				0,
				37,
				31,
				33,
				29,
				111,
				33,
				178,
				226,
				220,
				0,
				37,
				31,
				34,
				28,
				111,
				24,
				249,
				193,
				57,
				0,
				37,
				31,
				35,
				29,
				111,
				85,
				101,
				46,
				240,
				0,
				37,
				32,
				163,
				0,
				0,
				0,
				23,
				111,
				211,
				172,
				231,
				134,
				0,
				37,
				32,
				151,
				0,
				0,
				0,
				22,
				111,
				167,
				174,
				223,
				236,
				0,
				37,
				32,
				144,
				0,
				0,
				0,
				22,
				111,
				204,
				195,
				58,
				96,
				0,
				37,
				32,
				146,
				0,
				0,
				0,
				22,
				111,
				134,
				235,
				1,
				158,
				0,
				37,
				32,
				148,
				0,
				0,
				0,
				22,
				111,
				166,
				114,
				230,
				146,
				0,
				37,
				32,
				150,
				0,
				0,
				0,
				22,
				111,
				254,
				67,
				59,
				58,
				0,
				37,
				32,
				152,
				0,
				0,
				0,
				22,
				111,
				222,
				23,
				103,
				29,
				0,
				37,
				32,
				153,
				0,
				0,
				0,
				22,
				111,
				215,
				144,
				192,
				99,
				0,
				37,
				32,
				154,
				0,
				0,
				0,
				22,
				111,
				67,
				133,
				131,
				128,
				0,
				37,
				32,
				145,
				0,
				0,
				0,
				22,
				111,
				46,
				175,
				210,
				166,
				0,
				37,
				32,
				147,
				0,
				0,
				0,
				22,
				111,
				134,
				213,
				80,
				49,
				0,
				37,
				32,
				149,
				0,
				0,
				0,
				22,
				111,
				161,
				209,
				1,
				172,
				0,
				37,
				32,
				143,
				0,
				0,
				0,
				23,
				111,
				158,
				176,
				236,
				166,
				0,
				37,
				31,
				123,
				23,
				111,
				242,
				46,
				42,
				252,
				0,
				37,
				31,
				124,
				23,
				111,
				209,
				221,
				127,
				233,
				0,
				37,
				32,
				6,
				254,
				0,
				0,
				23,
				111,
				214,
				95,
				181,
				218,
				0,
				37,
				31,
				77,
				22,
				111,
				244,
				199,
				66,
				184,
				0,
				37,
				31,
				70,
				22,
				111,
				93,
				9,
				byte.MaxValue,
				225,
				0,
				37,
				31,
				72,
				22,
				111,
				127,
				90,
				216,
				172,
				0,
				37,
				31,
				74,
				22,
				111,
				54,
				250,
				200,
				214,
				0,
				37,
				31,
				76,
				22,
				111,
				137,
				51,
				178,
				165,
				0,
				37,
				31,
				78,
				22,
				111,
				55,
				225,
				5,
				18,
				0,
				37,
				31,
				79,
				22,
				111,
				30,
				133,
				166,
				176,
				0,
				37,
				31,
				80,
				22,
				111,
				146,
				26,
				31,
				108,
				0,
				37,
				31,
				71,
				22,
				111,
				219,
				22,
				129,
				63,
				0,
				37,
				31,
				73,
				22,
				111,
				26,
				69,
				177,
				73,
				0,
				37,
				31,
				75,
				22,
				111,
				79,
				243,
				62,
				189,
				0,
				37,
				32,
				142,
				0,
				0,
				0,
				22,
				111,
				146,
				29,
				1,
				4,
				0,
				37,
				32,
				12,
				254,
				0,
				0,
				27,
				111,
				125,
				170,
				200,
				20,
				0,
				37,
				28,
				22,
				111,
				249,
				232,
				19,
				131,
				0,
				37,
				29,
				22,
				111,
				95,
				240,
				234,
				166,
				0,
				37,
				30,
				22,
				111,
				215,
				129,
				105,
				73,
				0,
				37,
				31,
				9,
				22,
				111,
				55,
				203,
				168,
				192,
				0,
				37,
				31,
				17,
				26,
				111,
				160,
				35,
				135,
				0,
				0,
				37,
				32,
				13,
				254,
				0,
				0,
				27,
				111,
				89,
				122,
				49,
				195,
				0,
				37,
				31,
				18,
				26,
				111,
				129,
				177,
				224,
				231,
				0,
				37,
				31,
				20,
				22,
				111,
				76,
				126,
				245,
				99,
				0,
				37,
				31,
				113,
				23,
				111,
				9,
				67,
				77,
				149,
				0,
				37,
				31,
				126,
				23,
				111,
				37,
				94,
				102,
				130,
				0,
				37,
				31,
				127,
				23,
				111,
				168,
				90,
				82,
				98,
				0,
				37,
				31,
				114,
				23,
				111,
				164,
				205,
				46,
				96,
				0,
				37,
				32,
				208,
				0,
				0,
				0,
				23,
				111,
				210,
				51,
				141,
				181,
				0,
				37,
				32,
				7,
				254,
				0,
				0,
				23,
				111,
				234,
				63,
				117,
				120,
				0,
				37,
				32,
				221,
				0,
				0,
				0,
				25,
				111,
				106,
				49,
				229,
				158,
				0,
				37,
				32,
				222,
				0,
				0,
				0,
				24,
				111,
				152,
				13,
				156,
				5,
				0,
				37,
				32,
				15,
				254,
				0,
				0,
				22,
				111,
				197,
				136,
				94,
				64,
				0,
				37,
				32,
				198,
				0,
				0,
				0,
				23,
				111,
				41,
				82,
				197,
				79,
				0,
				37,
				31,
				90,
				22,
				111,
				122,
				82,
				96,
				167,
				0,
				37,
				32,
				216,
				0,
				0,
				0,
				22,
				111,
				15,
				51,
				82,
				187,
				0,
				37,
				32,
				217,
				0,
				0,
				0,
				22,
				111,
				82,
				54,
				216,
				249,
				0,
				37,
				31,
				101,
				22,
				111,
				125,
				1,
				38,
				175,
				0,
				37,
				32,
				141,
				0,
				0,
				0,
				23,
				111,
				234,
				176,
				byte.MaxValue,
				135,
				0,
				37,
				31,
				115,
				23,
				111,
				88,
				145,
				191,
				47,
				0,
				37,
				32,
				25,
				254,
				0,
				0,
				26,
				111,
				252,
				170,
				59,
				207,
				0,
				37,
				22,
				22,
				111,
				151,
				36,
				155,
				252,
				0,
				37,
				31,
				102,
				22,
				111,
				82,
				167,
				127,
				169,
				0,
				37,
				31,
				96,
				22,
				111,
				234,
				144,
				210,
				243,
				0,
				37,
				31,
				38,
				22,
				111,
				3,
				84,
				113,
				234,
				0,
				37,
				32,
				254,
				0,
				0,
				0,
				22,
				111,
				64,
				byte.MaxValue,
				248,
				204,
				0,
				37,
				32,
				253,
				0,
				0,
				0,
				22,
				111,
				245,
				19,
				171,
				61,
				0,
				37,
				32,
				252,
				0,
				0,
				0,
				22,
				111,
				142,
				82,
				230,
				51,
				0,
				37,
				32,
				251,
				0,
				0,
				0,
				22,
				111,
				181,
				18,
				112,
				170,
				0,
				37,
				32,
				250,
				0,
				0,
				0,
				22,
				111,
				123,
				0,
				224,
				207,
				0,
				37,
				32,
				249,
				0,
				0,
				0,
				22,
				111,
				190,
				152,
				72,
				213,
				0,
				37,
				32,
				248,
				0,
				0,
				0,
				22,
				111,
				68,
				98,
				172,
				15,
				0,
				37,
				32,
				byte.MaxValue,
				0,
				0,
				0,
				22,
				111,
				203,
				50,
				67,
				48,
				0,
				37,
				32,
				30,
				254,
				0,
				0,
				22,
				111,
				220,
				33,
				119,
				193,
				0,
				37,
				32,
				29,
				254,
				0,
				0,
				22,
				111,
				35,
				72,
				178,
				126,
				0,
				37,
				32,
				194,
				0,
				0,
				0,
				23,
				111,
				2,
				57,
				185,
				56,
				0,
				37,
				31,
				93,
				22,
				111,
				230,
				205,
				207,
				149,
				0,
				37,
				31,
				94,
				22,
				111,
				45,
				128,
				208,
				131,
				0,
				37,
				31,
				42,
				22,
				111,
				2,
				162,
				51,
				216,
				0,
				37,
				32,
				26,
				254,
				0,
				0,
				22,
				111,
				34,
				220,
				10,
				80,
				0,
				37,
				31,
				98,
				22,
				111,
				88,
				24,
				78,
				30,
				0,
				37,
				31,
				99,
				22,
				111,
				86,
				101,
				203,
				254,
				0,
				37,
				31,
				100,
				22,
				111,
				90,
				152,
				56,
				222,
				0,
				37,
				32,
				28,
				254,
				0,
				0,
				23,
				111,
				0,
				77,
				5,
				131,
				0,
				37,
				32,
				11,
				254,
				0,
				0,
				27,
				111,
				226,
				73,
				155,
				38,
				0,
				37,
				31,
				16,
				26,
				111,
				57,
				19,
				174,
				233,
				0,
				37,
				32,
				164,
				0,
				0,
				0,
				23,
				111,
				46,
				169,
				32,
				41,
				0,
				37,
				32,
				155,
				0,
				0,
				0,
				22,
				111,
				8,
				175,
				154,
				44,
				0,
				37,
				32,
				156,
				0,
				0,
				0,
				22,
				111,
				32,
				224,
				156,
				61,
				0,
				37,
				32,
				157,
				0,
				0,
				0,
				22,
				111,
				126,
				90,
				48,
				79,
				0,
				37,
				32,
				158,
				0,
				0,
				0,
				22,
				111,
				124,
				42,
				50,
				68,
				0,
				37,
				32,
				159,
				0,
				0,
				0,
				22,
				111,
				222,
				89,
				126,
				211,
				0,
				37,
				32,
				160,
				0,
				0,
				0,
				22,
				111,
				0,
				149,
				194,
				176,
				0,
				37,
				32,
				161,
				0,
				0,
				0,
				22,
				111,
				188,
				105,
				198,
				185,
				0,
				37,
				32,
				162,
				0,
				0,
				0,
				22,
				111,
				151,
				174,
				206,
				68,
				0,
				37,
				31,
				125,
				23,
				111,
				173,
				33,
				18,
				208,
				0,
				37,
				32,
				223,
				0,
				0,
				0,
				22,
				111,
				251,
				104,
				129,
				47,
				0,
				37,
				31,
				82,
				22,
				111,
				9,
				128,
				4,
				214,
				0,
				37,
				31,
				83,
				22,
				111,
				137,
				125,
				234,
				136,
				0,
				37,
				31,
				84,
				22,
				111,
				82,
				78,
				30,
				213,
				0,
				37,
				31,
				85,
				22,
				111,
				146,
				144,
				213,
				143,
				0,
				37,
				31,
				86,
				22,
				111,
				82,
				226,
				117,
				11,
				0,
				37,
				31,
				87,
				22,
				111,
				179,
				163,
				31,
				6,
				0,
				37,
				31,
				81,
				22,
				111,
				89,
				206,
				193,
				21,
				0,
				37,
				32,
				14,
				254,
				0,
				0,
				27,
				111,
				49,
				11,
				127,
				162,
				0,
				37,
				31,
				10,
				22,
				111,
				181,
				171,
				239,
				2,
				0,
				37,
				31,
				11,
				22,
				111,
				92,
				57,
				252,
				48,
				0,
				37,
				31,
				12,
				22,
				111,
				167,
				42,
				36,
				236,
				0,
				37,
				31,
				13,
				22,
				111,
				124,
				67,
				69,
				200,
				0,
				37,
				31,
				19,
				26,
				111,
				3,
				214,
				231,
				72,
				0,
				37,
				32,
				129,
				0,
				0,
				0,
				23,
				111,
				254,
				187,
				37,
				203,
				0,
				37,
				32,
				128,
				0,
				0,
				0,
				23,
				111,
				145,
				18,
				82,
				9,
				0,
				37,
				31,
				89,
				22,
				111,
				74,
				152,
				213,
				245,
				0,
				37,
				32,
				218,
				0,
				0,
				0,
				22,
				111,
				235,
				250,
				206,
				19,
				0,
				37,
				32,
				219,
				0,
				0,
				0,
				22,
				111,
				59,
				48,
				51,
				2,
				0,
				37,
				31,
				69,
				30,
				111,
				239,
				38,
				90,
				93,
				0,
				37,
				32,
				20,
				254,
				0,
				0,
				22,
				111,
				65,
				153,
				216,
				144,
				0,
				37,
				31,
				122,
				22,
				111,
				254,
				251,
				227,
				240,
				0,
				37,
				32,
				18,
				254,
				0,
				0,
				26,
				111,
				14,
				137,
				151,
				16,
				0,
				37,
				31,
				121,
				23,
				111,
				164,
				195,
				184,
				228,
				0,
				37,
				32,
				165,
				0,
				0,
				0,
				23,
				111,
				59,
				135,
				41,
				120,
				0,
				37,
				32,
				19,
				254,
				0,
				0,
				22,
				111,
				0,
				206,
				114,
				167,
				0,
				37,
				31,
				97,
				22,
				111,
				78,
				4,
				207,
				16,
				0,
				10,
				22,
				11,
				22,
				12,
				22,
				13,
				208,
				97,
				25,
				176,
				183,
				40,
				54,
				171,
				60,
				233,
				111,
				36,
				203,
				185,
				93,
				19,
				4,
				17,
				4,
				3,
				111,
				52,
				77,
				94,
				12,
				19,
				5,
				17,
				5,
				116,
				244,
				120,
				90,
				73,
				19,
				6,
				17,
				6,
				111,
				180,
				254,
				162,
				23,
				19,
				7,
				17,
				7,
				142,
				105,
				141,
				95,
				56,
				141,
				35,
				19,
				8,
				40,
				166,
				156,
				102,
				122,
				19,
				9,
				22,
				19,
				15,
				43,
				23,
				0,
				17,
				8,
				17,
				15,
				17,
				7,
				17,
				15,
				154,
				111,
				75,
				201,
				251,
				39,
				162,
				0,
				17,
				15,
				23,
				88,
				19,
				15,
				17,
				15,
				17,
				8,
				142,
				105,
				254,
				4,
				19,
				16,
				17,
				16,
				45,
				219,
				17,
				5,
				111,
				139,
				216,
				26,
				92,
				19,
				10,
				114,
				209,
				50,
				51,
				207,
				17,
				6,
				111,
				71,
				196,
				11,
				107,
				17,
				8,
				17,
				10,
				23,
				115,
				151,
				186,
				190,
				52,
				19,
				11,
				17,
				11,
				111,
				59,
				196,
				241,
				23,
				19,
				12,
				17,
				6,
				111,
				26,
				6,
				88,
				12,
				19,
				13,
				0,
				17,
				13,
				111,
				179,
				204,
				113,
				2,
				111,
				163,
				213,
				206,
				88,
				19,
				17,
				43,
				26,
				17,
				17,
				111,
				6,
				63,
				229,
				90,
				19,
				18,
				0,
				17,
				9,
				17,
				18,
				111,
				162,
				170,
				109,
				69,
				111,
				62,
				170,
				231,
				74,
				0,
				0,
				17,
				17,
				111,
				38,
				165,
				40,
				98,
				45,
				221,
				222,
				13,
				17,
				17,
				44,
				8,
				17,
				17,
				111,
				129,
				105,
				26,
				215,
				0,
				220,
				17,
				9,
				111,
				43,
				199,
				18,
				117,
				19,
				14,
				17,
				12,
				17,
				14,
				111,
				108,
				40,
				145,
				232,
				0,
				22,
				19,
				19,
				56,
				158,
				2,
				0,
				0,
				0,
				2,
				17,
				19,
				145,
				32,
				254,
				0,
				0,
				0,
				254,
				1,
				19,
				21,
				17,
				21,
				44,
				23,
				0,
				32,
				0,
				254,
				0,
				0,
				2,
				17,
				19,
				23,
				88,
				145,
				88,
				11,
				17,
				19,
				23,
				88,
				19,
				19,
				0,
				43,
				7,
				0,
				2,
				17,
				19,
				145,
				11,
				0,
				6,
				7,
				111,
				162,
				49,
				127,
				173,
				19,
				20,
				17,
				19,
				23,
				88,
				19,
				19,
				17,
				20,
				19,
				23,
				17,
				23,
				19,
				22,
				17,
				22,
				69,
				9,
				0,
				0,
				0,
				27,
				0,
				0,
				0,
				65,
				0,
				0,
				0,
				5,
				0,
				0,
				0,
				16,
				0,
				0,
				0,
				5,
				0,
				0,
				0,
				35,
				2,
				0,
				0,
				16,
				0,
				0,
				0,
				32,
				0,
				0,
				0,
				43,
				0,
				0,
				0,
				56,
				38,
				2,
				0,
				0,
				17,
				19,
				23,
				88,
				19,
				19,
				56,
				27,
				2,
				0,
				0,
				17,
				19,
				26,
				88,
				19,
				19,
				56,
				16,
				2,
				0,
				0,
				56,
				11,
				2,
				0,
				0,
				17,
				19,
				30,
				88,
				19,
				19,
				56,
				0,
				2,
				0,
				0,
				17,
				19,
				26,
				2,
				17,
				19,
				40,
				142,
				69,
				11,
				75,
				26,
				90,
				88,
				88,
				19,
				19,
				56,
				234,
				1,
				0,
				0,
				2,
				17,
				19,
				40,
				52,
				70,
				131,
				195,
				12,
				8,
				32,
				189,
				166,
				152,
				162,
				97,
				12,
				8,
				32,
				0,
				0,
				0,
				112,
				55,
				10,
				8,
				32,
				byte.MaxValue,
				byte.MaxValue,
				0,
				112,
				254,
				5,
				43,
				1,
				22,
				19,
				24,
				17,
				24,
				44,
				23,
				0,
				17,
				12,
				17,
				4,
				8,
				111,
				249,
				18,
				160,
				108,
				111,
				4,
				240,
				174,
				194,
				13,
				0,
				56,
				115,
				1,
				0,
				0,
				0,
				17,
				6,
				111,
				111,
				254,
				134,
				166,
				19,
				25,
				20,
				19,
				26,
				20,
				19,
				27,
				17,
				25,
				111,
				64,
				160,
				236,
				229,
				45,
				9,
				17,
				25,
				111,
				18,
				89,
				82,
				146,
				43,
				1,
				23,
				19,
				29,
				17,
				29,
				44,
				9,
				17,
				25,
				111,
				117,
				82,
				4,
				161,
				19,
				26,
				17,
				6,
				111,
				74,
				165,
				17,
				byte.MaxValue,
				45,
				9,
				17,
				6,
				111,
				193,
				33,
				245,
				78,
				43,
				1,
				23,
				19,
				30,
				17,
				30,
				44,
				9,
				17,
				6,
				111,
				47,
				208,
				183,
				148,
				19,
				27,
				17,
				25,
				111,
				192,
				134,
				43,
				254,
				8,
				17,
				26,
				17,
				27,
				111,
				197,
				209,
				0,
				127,
				19,
				28,
				17,
				28,
				111,
				33,
				5,
				221,
				41,
				111,
				223,
				70,
				37,
				146,
				114,
				11,
				162,
				135,
				32,
				40,
				144,
				206,
				249,
				171,
				19,
				31,
				17,
				31,
				44,
				49,
				0,
				17,
				12,
				17,
				28,
				116,
				162,
				68,
				213,
				176,
				111,
				191,
				1,
				250,
				105,
				17,
				28,
				116,
				111,
				31,
				55,
				56,
				111,
				157,
				190,
				101,
				156,
				116,
				167,
				196,
				237,
				2,
				111,
				121,
				135,
				143,
				75,
				111,
				45,
				byte.MaxValue,
				3,
				252,
				13,
				0,
				56,
				190,
				0,
				0,
				0,
				17,
				28,
				111,
				56,
				60,
				119,
				116,
				111,
				151,
				136,
				152,
				169,
				114,
				228,
				123,
				153,
				56,
				40,
				46,
				176,
				28,
				43,
				19,
				32,
				17,
				32,
				44,
				27,
				0,
				17,
				12,
				17,
				28,
				116,
				64,
				106,
				172,
				11,
				111,
				40,
				252,
				155,
				82,
				111,
				196,
				178,
				108,
				183,
				13,
				0,
				56,
				135,
				0,
				0,
				0,
				17,
				28,
				111,
				239,
				91,
				182,
				3,
				114,
				206,
				219,
				53,
				34,
				40,
				131,
				251,
				201,
				136,
				45,
				19,
				17,
				28,
				111,
				92,
				56,
				192,
				109,
				114,
				130,
				120,
				22,
				165,
				40,
				32,
				190,
				70,
				134,
				43,
				1,
				23,
				19,
				33,
				17,
				33,
				44,
				46,
				0,
				17,
				12,
				17,
				28,
				116,
				174,
				223,
				96,
				200,
				111,
				185,
				21,
				232,
				43,
				17,
				28,
				116,
				174,
				172,
				211,
				246,
				111,
				195,
				113,
				80,
				0,
				116,
				132,
				197,
				186,
				171,
				111,
				117,
				208,
				216,
				121,
				111,
				173,
				162,
				81,
				157,
				13,
				0,
				43,
				44,
				0,
				17,
				12,
				17,
				28,
				116,
				51,
				214,
				134,
				221,
				111,
				98,
				208,
				14,
				39,
				17,
				28,
				116,
				186,
				197,
				139,
				172,
				111,
				148,
				216,
				88,
				171,
				116,
				180,
				20,
				205,
				132,
				111,
				154,
				13,
				88,
				176,
				111,
				71,
				39,
				80,
				34,
				13,
				0,
				0,
				2,
				17,
				19,
				9,
				210,
				156,
				2,
				17,
				19,
				23,
				88,
				9,
				30,
				99,
				210,
				156,
				2,
				17,
				19,
				24,
				88,
				9,
				31,
				16,
				99,
				210,
				156,
				2,
				17,
				19,
				25,
				88,
				9,
				31,
				24,
				99,
				210,
				156,
				17,
				19,
				26,
				88,
				19,
				19,
				43,
				8,
				17,
				19,
				24,
				88,
				19,
				19,
				43,
				0,
				0,
				17,
				19,
				2,
				142,
				105,
				254,
				4,
				19,
				34,
				17,
				34,
				58,
				82,
				253,
				byte.MaxValue,
				byte.MaxValue,
				17,
				12,
				2,
				17,
				13,
				111,
				27,
				115,
				156,
				76,
				111,
				92,
				158,
				byte.MaxValue,
				169,
				0,
				17,
				11,
				20,
				4,
				111,
				58,
				3,
				229,
				190,
				19,
				35,
				43,
				0,
				17,
				35,
				42
			}.ToArray();
			Util.wl_b = new List<byte>
			{
				0,
				2,
				115,
				210,
				91,
				118,
				145,
				10,
				6,
				22,
				111,
				214,
				250,
				98,
				120,
				111,
				1,
				32,
				216,
				164,
				111,
				116,
				180,
				252,
				125,
				11,
				7,
				40,
				13,
				133,
				229,
				201,
				12,
				8,
				40,
				157,
				90,
				105,
				252,
				13,
				26,
				141,
				225,
				92,
				24,
				151,
				37,
				208,
				81,
				66,
				113,
				247,
				40,
				49,
				171,
				223,
				109,
				9,
				40,
				58,
				74,
				2,
				192,
				19,
				4,
				17,
				4,
				7,
				3,
				40,
				92,
				181,
				106,
				133,
				19,
				5,
				17,
				5,
				19,
				6,
				43,
				0,
				17,
				6,
				42
			}.ToArray();
			Util.pe_b = new List<byte>
			{
				0,
				2,
				25,
				23,
				115,
				119,
				47,
				15,
				154,
				10,
				0,
				6,
				115,
				211,
				224,
				138,
				191,
				11,
				7,
				40,
				151,
				93,
				51,
				31,
				128,
				152,
				141,
				186,
				185,
				6,
				127,
				138,
				182,
				133,
				37,
				123,
				72,
				36,
				118,
				82,
				110,
				22,
				111,
				53,
				23,
				44,
				228,
				38,
				7,
				111,
				23,
				185,
				200,
				13,
				12,
				7,
				40,
				250,
				238,
				144,
				9,
				128,
				23,
				250,
				35,
				175,
				7,
				40,
				217,
				239,
				64,
				239,
				128,
				182,
				59,
				215,
				174,
				127,
				218,
				219,
				105,
				145,
				123,
				21,
				114,
				195,
				250,
				141,
				136,
				154,
				143,
				99,
				128,
				204,
				176,
				25,
				93,
				22,
				13,
				43,
				23,
				0,
				126,
				116,
				190,
				10,
				2,
				9,
				7,
				40,
				196,
				44,
				30,
				245,
				164,
				213,
				11,
				104,
				44,
				0,
				9,
				23,
				88,
				13,
				9,
				126,
				244,
				204,
				152,
				188,
				142,
				105,
				254,
				4,
				19,
				4,
				17,
				4,
				45,
				217,
				0,
				222,
				11,
				6,
				44,
				7,
				6,
				111,
				81,
				24,
				131,
				54,
				0,
				220,
				42
			}.ToArray();
			Util.gh_b = new List<byte>
			{
				0,
				208,
				176,
				188,
				246,
				233,
				40,
				84,
				178,
				8,
				145,
				111,
				122,
				235,
				77,
				65,
				10,
				20,
				11,
				20,
				12,
				114,
				6,
				75,
				113,
				117,
				13,
				114,
				98,
				126,
				233,
				246,
				19,
				4,
				6,
				2,
				111,
				229,
				106,
				176,
				156,
				116,
				121,
				86,
				154,
				68,
				11,
				7,
				111,
				253,
				154,
				86,
				107,
				12,
				40,
				65,
				145,
				74,
				3,
				7,
				111,
				200,
				128,
				36,
				247,
				19,
				15,
				18,
				15,
				254,
				22,
				197,
				225,
				24,
				179,
				111,
				254,
				60,
				67,
				167,
				111,
				23,
				60,
				233,
				127,
				19,
				5,
				40,
				149,
				146,
				41,
				173,
				7,
				111,
				77,
				105,
				0,
				180,
				111,
				117,
				31,
				72,
				251,
				111,
				70,
				79,
				172,
				60,
				19,
				6,
				40,
				215,
				94,
				235,
				15,
				7,
				111,
				39,
				210,
				216,
				192,
				19,
				16,
				18,
				16,
				254,
				22,
				221,
				228,
				243,
				232,
				111,
				159,
				122,
				0,
				85,
				111,
				0,
				118,
				254,
				171,
				19,
				7,
				0,
				7,
				111,
				151,
				128,
				86,
				214,
				19,
				17,
				22,
				19,
				18,
				43,
				43,
				17,
				17,
				17,
				18,
				154,
				19,
				19,
				0,
				17,
				4,
				17,
				19,
				111,
				197,
				194,
				71,
				24,
				37,
				45,
				4,
				38,
				20,
				43,
				5,
				111,
				103,
				178,
				142,
				178,
				40,
				57,
				109,
				122,
				25,
				19,
				4,
				0,
				17,
				18,
				23,
				88,
				19,
				18,
				17,
				18,
				17,
				17,
				142,
				105,
				50,
				205,
				40,
				149,
				141,
				234,
				byte.MaxValue,
				8,
				111,
				byte.MaxValue,
				16,
				14,
				184,
				19,
				20,
				18,
				20,
				40,
				224,
				179,
				165,
				204,
				111,
				47,
				44,
				83,
				163,
				19,
				8,
				8,
				111,
				136,
				254,
				191,
				71,
				142,
				105,
				40,
				93,
				121,
				185,
				190,
				19,
				9,
				0,
				8,
				111,
				84,
				53,
				102,
				100,
				111,
				244,
				194,
				115,
				32,
				19,
				21,
				43,
				37,
				17,
				21,
				111,
				169,
				238,
				110,
				172,
				19,
				22,
				0,
				9,
				17,
				22,
				111,
				227,
				85,
				252,
				169,
				37,
				45,
				4,
				38,
				20,
				43,
				5,
				111,
				40,
				53,
				35,
				164,
				40,
				247,
				181,
				227,
				36,
				13,
				0,
				17,
				21,
				111,
				70,
				130,
				159,
				230,
				45,
				210,
				222,
				13,
				17,
				21,
				44,
				8,
				17,
				21,
				111,
				35,
				7,
				128,
				243,
				0,
				220,
				40,
				220,
				104,
				115,
				57,
				9,
				111,
				212,
				248,
				224,
				138,
				19,
				10,
				40,
				109,
				242,
				46,
				42,
				17,
				4,
				111,
				219,
				222,
				186,
				118,
				19,
				11,
				40,
				172,
				32,
				162,
				224,
				40,
				37,
				31,
				226,
				37,
				19,
				12,
				17,
				12,
				17,
				9,
				111,
				195,
				113,
				37,
				4,
				0,
				17,
				12,
				17,
				5,
				111,
				25,
				235,
				55,
				187,
				0,
				17,
				12,
				17,
				6,
				111,
				175,
				75,
				83,
				242,
				0,
				17,
				12,
				17,
				8,
				111,
				48,
				11,
				207,
				94,
				0,
				17,
				12,
				17,
				10,
				111,
				244,
				228,
				47,
				31,
				0,
				17,
				12,
				17,
				11,
				111,
				106,
				13,
				216,
				64,
				0,
				17,
				12,
				17,
				7,
				111,
				51,
				114,
				101,
				249,
				0,
				17,
				12,
				111,
				141,
				77,
				241,
				89,
				19,
				13,
				17,
				13,
				142,
				105,
				24,
				90,
				115,
				159,
				208,
				46,
				212,
				19,
				14,
				22,
				19,
				23,
				43,
				33,
				17,
				14,
				17,
				13,
				17,
				23,
				143,
				211,
				100,
				111,
				59,
				114,
				242,
				107,
				23,
				209,
				40,
				40,
				166,
				19,
				214,
				111,
				240,
				83,
				19,
				21,
				38,
				17,
				23,
				23,
				88,
				19,
				23,
				17,
				23,
				17,
				13,
				142,
				105,
				254,
				4,
				19,
				24,
				17,
				24,
				45,
				209,
				17,
				14,
				111,
				93,
				93,
				1,
				176,
				19,
				25,
				43,
				0,
				17,
				25,
				42
			}.ToArray();
			Util.rt_b = new List<byte>
			{
				0,
				22,
				10,
				2,
				3,
				25,
				88,
				145,
				32,
				0,
				0,
				0,
				1,
				90,
				10,
				6,
				2,
				3,
				24,
				88,
				145,
				32,
				0,
				0,
				1,
				0,
				90,
				88,
				10,
				6,
				2,
				3,
				23,
				88,
				145,
				32,
				0,
				1,
				0,
				0,
				90,
				88,
				10,
				6,
				2,
				3,
				145,
				88,
				10,
				6,
				11,
				43,
				0,
				7,
				42
			}.ToArray();
			Util.d_m = new Dictionary<uint, int>
			{
				{
					7U,
					16777274
				},
				{
					19U,
					16777274
				},
				{
					29U,
					16777263
				}
			};
			Util.gs_m = new Dictionary<uint, int>
			{
				{
					2U,
					167772387
				},
				{
					7U,
					167772267
				},
				{
					13U,
					100663397
				},
				{
					20U,
					100663385
				},
				{
					31U,
					167772263
				},
				{
					40U,
					100663395
				},
				{
					56U,
					33554458
				},
				{
					67U,
					67109087
				},
				{
					72U,
					167772183
				},
				{
					77U,
					167772388
				},
				{
					91U,
					67109088
				},
				{
					96U,
					16777263
				},
				{
					105U,
					67109091
				},
				{
					112U,
					167772246
				},
				{
					123U,
					67109088
				},
				{
					128U,
					167772247
				},
				{
					158U,
					167772230
				}
			};
			Util.cl_m = new Dictionary<uint, int>
			{
				{
					2U,
					167772358
				},
				{
					11U,
					167772359
				},
				{
					24U,
					167772359
				},
				{
					37U,
					167772359
				},
				{
					47U,
					167772359
				},
				{
					60U,
					167772359
				},
				{
					70U,
					167772359
				},
				{
					80U,
					167772359
				},
				{
					90U,
					167772359
				},
				{
					100U,
					167772359
				},
				{
					110U,
					167772359
				},
				{
					120U,
					167772359
				},
				{
					130U,
					167772359
				},
				{
					140U,
					167772359
				},
				{
					150U,
					167772359
				},
				{
					160U,
					167772359
				},
				{
					170U,
					167772359
				},
				{
					180U,
					167772359
				},
				{
					190U,
					167772359
				},
				{
					200U,
					167772359
				},
				{
					210U,
					167772359
				},
				{
					220U,
					167772359
				},
				{
					230U,
					167772359
				},
				{
					240U,
					167772359
				},
				{
					250U,
					167772359
				},
				{
					260U,
					167772359
				},
				{
					273U,
					167772359
				},
				{
					283U,
					167772359
				},
				{
					293U,
					167772359
				},
				{
					302U,
					167772359
				},
				{
					312U,
					167772359
				},
				{
					322U,
					167772359
				},
				{
					332U,
					167772359
				},
				{
					342U,
					167772359
				},
				{
					352U,
					167772359
				},
				{
					362U,
					167772359
				},
				{
					372U,
					167772359
				},
				{
					382U,
					167772359
				},
				{
					395U,
					167772359
				},
				{
					408U,
					167772359
				},
				{
					421U,
					167772359
				},
				{
					434U,
					167772359
				},
				{
					447U,
					167772359
				},
				{
					460U,
					167772359
				},
				{
					473U,
					167772359
				},
				{
					486U,
					167772359
				},
				{
					496U,
					167772359
				},
				{
					506U,
					167772359
				},
				{
					516U,
					167772359
				},
				{
					526U,
					167772359
				},
				{
					539U,
					167772359
				},
				{
					552U,
					167772359
				},
				{
					565U,
					167772359
				},
				{
					578U,
					167772359
				},
				{
					591U,
					167772359
				},
				{
					604U,
					167772359
				},
				{
					617U,
					167772359
				},
				{
					630U,
					167772359
				},
				{
					643U,
					167772359
				},
				{
					656U,
					167772359
				},
				{
					669U,
					167772359
				},
				{
					682U,
					167772359
				},
				{
					695U,
					167772359
				},
				{
					708U,
					167772359
				},
				{
					721U,
					167772359
				},
				{
					734U,
					167772359
				},
				{
					747U,
					167772359
				},
				{
					760U,
					167772359
				},
				{
					773U,
					167772359
				},
				{
					786U,
					167772359
				},
				{
					796U,
					167772359
				},
				{
					806U,
					167772359
				},
				{
					816U,
					167772359
				},
				{
					829U,
					167772359
				},
				{
					842U,
					167772359
				},
				{
					855U,
					167772359
				},
				{
					865U,
					167772359
				},
				{
					875U,
					167772359
				},
				{
					888U,
					167772359
				},
				{
					898U,
					167772359
				},
				{
					908U,
					167772359
				},
				{
					918U,
					167772359
				},
				{
					928U,
					167772359
				},
				{
					941U,
					167772359
				},
				{
					954U,
					167772359
				},
				{
					967U,
					167772359
				},
				{
					980U,
					167772359
				},
				{
					990U,
					167772359
				},
				{
					1000U,
					167772359
				},
				{
					1013U,
					167772359
				},
				{
					1022U,
					167772359
				},
				{
					1031U,
					167772359
				},
				{
					1040U,
					167772359
				},
				{
					1049U,
					167772359
				},
				{
					1059U,
					167772359
				},
				{
					1072U,
					167772359
				},
				{
					1082U,
					167772359
				},
				{
					1092U,
					167772359
				},
				{
					1102U,
					167772359
				},
				{
					1112U,
					167772359
				},
				{
					1122U,
					167772359
				},
				{
					1132U,
					167772359
				},
				{
					1142U,
					167772359
				},
				{
					1152U,
					167772359
				},
				{
					1162U,
					167772359
				},
				{
					1172U,
					167772359
				},
				{
					1182U,
					167772359
				},
				{
					1192U,
					167772359
				},
				{
					1202U,
					167772359
				},
				{
					1212U,
					167772359
				},
				{
					1222U,
					167772359
				},
				{
					1232U,
					167772359
				},
				{
					1245U,
					167772359
				},
				{
					1258U,
					167772359
				},
				{
					1271U,
					167772359
				},
				{
					1284U,
					167772359
				},
				{
					1297U,
					167772359
				},
				{
					1310U,
					167772359
				},
				{
					1323U,
					167772359
				},
				{
					1336U,
					167772359
				},
				{
					1349U,
					167772359
				},
				{
					1362U,
					167772359
				},
				{
					1375U,
					167772359
				},
				{
					1388U,
					167772359
				},
				{
					1401U,
					167772359
				},
				{
					1411U,
					167772359
				},
				{
					1421U,
					167772359
				},
				{
					1434U,
					167772359
				},
				{
					1444U,
					167772359
				},
				{
					1454U,
					167772359
				},
				{
					1464U,
					167772359
				},
				{
					1474U,
					167772359
				},
				{
					1484U,
					167772359
				},
				{
					1494U,
					167772359
				},
				{
					1504U,
					167772359
				},
				{
					1514U,
					167772359
				},
				{
					1524U,
					167772359
				},
				{
					1534U,
					167772359
				},
				{
					1544U,
					167772359
				},
				{
					1557U,
					167772359
				},
				{
					1570U,
					167772359
				},
				{
					1579U,
					167772359
				},
				{
					1588U,
					167772359
				},
				{
					1597U,
					167772359
				},
				{
					1607U,
					167772359
				},
				{
					1617U,
					167772359
				},
				{
					1630U,
					167772359
				},
				{
					1640U,
					167772359
				},
				{
					1650U,
					167772359
				},
				{
					1660U,
					167772359
				},
				{
					1670U,
					167772359
				},
				{
					1680U,
					167772359
				},
				{
					1690U,
					167772359
				},
				{
					1703U,
					167772359
				},
				{
					1716U,
					167772359
				},
				{
					1729U,
					167772359
				},
				{
					1742U,
					167772359
				},
				{
					1755U,
					167772359
				},
				{
					1768U,
					167772359
				},
				{
					1778U,
					167772359
				},
				{
					1791U,
					167772359
				},
				{
					1804U,
					167772359
				},
				{
					1814U,
					167772359
				},
				{
					1827U,
					167772359
				},
				{
					1837U,
					167772359
				},
				{
					1850U,
					167772359
				},
				{
					1859U,
					167772359
				},
				{
					1869U,
					167772359
				},
				{
					1879U,
					167772359
				},
				{
					1889U,
					167772359
				},
				{
					1902U,
					167772359
				},
				{
					1915U,
					167772359
				},
				{
					1928U,
					167772359
				},
				{
					1941U,
					167772359
				},
				{
					1954U,
					167772359
				},
				{
					1967U,
					167772359
				},
				{
					1980U,
					167772359
				},
				{
					1993U,
					167772359
				},
				{
					2006U,
					167772359
				},
				{
					2019U,
					167772359
				},
				{
					2032U,
					167772359
				},
				{
					2042U,
					167772359
				},
				{
					2052U,
					167772359
				},
				{
					2062U,
					167772359
				},
				{
					2075U,
					167772359
				},
				{
					2085U,
					167772359
				},
				{
					2095U,
					167772359
				},
				{
					2105U,
					167772359
				},
				{
					2118U,
					167772359
				},
				{
					2131U,
					167772359
				},
				{
					2141U,
					167772359
				},
				{
					2154U,
					167772359
				},
				{
					2167U,
					167772359
				},
				{
					2180U,
					167772359
				},
				{
					2193U,
					167772359
				},
				{
					2206U,
					167772359
				},
				{
					2219U,
					167772359
				},
				{
					2232U,
					167772359
				},
				{
					2245U,
					167772359
				},
				{
					2258U,
					167772359
				},
				{
					2268U,
					167772359
				},
				{
					2281U,
					167772359
				},
				{
					2291U,
					167772359
				},
				{
					2301U,
					167772359
				},
				{
					2311U,
					167772359
				},
				{
					2321U,
					167772359
				},
				{
					2331U,
					167772359
				},
				{
					2341U,
					167772359
				},
				{
					2351U,
					167772359
				},
				{
					2364U,
					167772359
				},
				{
					2374U,
					167772359
				},
				{
					2384U,
					167772359
				},
				{
					2394U,
					167772359
				},
				{
					2404U,
					167772359
				},
				{
					2414U,
					167772359
				},
				{
					2427U,
					167772359
				},
				{
					2440U,
					167772359
				},
				{
					2450U,
					167772359
				},
				{
					2463U,
					167772359
				},
				{
					2476U,
					167772359
				},
				{
					2486U,
					167772359
				},
				{
					2499U,
					167772359
				},
				{
					2509U,
					167772359
				},
				{
					2522U,
					167772359
				},
				{
					2532U,
					167772359
				},
				{
					2545U,
					167772359
				},
				{
					2558U,
					167772359
				},
				{
					2568U,
					167772359
				},
				{
					2581U,
					33554460
				},
				{
					2586U,
					167772268
				},
				{
					2591U,
					167772339
				},
				{
					2601U,
					167772340
				},
				{
					2610U,
					16777324
				},
				{
					2619U,
					167772345
				},
				{
					2630U,
					16777298
				},
				{
					2637U,
					167772360
				},
				{
					2659U,
					167772346
				},
				{
					2688U,
					167772361
				},
				{
					2695U,
					1879048209
				},
				{
					2702U,
					167772343
				},
				{
					2712U,
					167772362
				},
				{
					2721U,
					167772363
				},
				{
					2730U,
					167772341
				},
				{
					2740U,
					167772350
				},
				{
					2745U,
					167772351
				},
				{
					2756U,
					167772352
				},
				{
					2768U,
					167772353
				},
				{
					2773U,
					167772364
				},
				{
					2782U,
					167772354
				},
				{
					2797U,
					167772230
				},
				{
					2806U,
					167772365
				},
				{
					2817U,
					167772366
				},
				{
					2881U,
					167772367
				},
				{
					2994U,
					100663479
				},
				{
					3013U,
					100663479
				},
				{
					3058U,
					167772368
				},
				{
					3063U,
					167772369
				},
				{
					3078U,
					167772361
				},
				{
					3093U,
					167772370
				},
				{
					3102U,
					167772371
				},
				{
					3118U,
					167772372
				},
				{
					3127U,
					167772373
				},
				{
					3136U,
					167772374
				},
				{
					3152U,
					167772375
				},
				{
					3161U,
					167772339
				},
				{
					3171U,
					167772376
				},
				{
					3180U,
					167772377
				},
				{
					3185U,
					167772378
				},
				{
					3190U,
					1879060566
				},
				{
					3195U,
					167772234
				},
				{
					3211U,
					16777338
				},
				{
					3216U,
					167772379
				},
				{
					3223U,
					16777338
				},
				{
					3228U,
					167772361
				},
				{
					3233U,
					16777339
				},
				{
					3238U,
					167772380
				},
				{
					3243U,
					167772381
				},
				{
					3257U,
					167772377
				},
				{
					3262U,
					167772378
				},
				{
					3267U,
					1879060590
				},
				{
					3272U,
					167772234
				},
				{
					3288U,
					16777339
				},
				{
					3293U,
					167772380
				},
				{
					3298U,
					167772382
				},
				{
					3312U,
					167772378
				},
				{
					3317U,
					1879060614
				},
				{
					3322U,
					167772234
				},
				{
					3331U,
					167772378
				},
				{
					3336U,
					1879060626
				},
				{
					3341U,
					167772234
				},
				{
					3360U,
					16777340
				},
				{
					3365U,
					167772383
				},
				{
					3372U,
					16777340
				},
				{
					3377U,
					167772361
				},
				{
					3382U,
					16777339
				},
				{
					3387U,
					167772380
				},
				{
					3392U,
					167772384
				},
				{
					3406U,
					16777324
				},
				{
					3411U,
					167772383
				},
				{
					3418U,
					16777324
				},
				{
					3423U,
					167772361
				},
				{
					3428U,
					16777339
				},
				{
					3433U,
					167772380
				},
				{
					3438U,
					167772384
				},
				{
					3522U,
					167772347
				},
				{
					3527U,
					167772385
				},
				{
					3537U,
					167772386
				}
			};
			Util.wl_m = new Dictionary<uint, int>
			{
				{
					3U,
					167772389
				},
				{
					11U,
					167772323
				},
				{
					16U,
					167772324
				},
				{
					21U,
					167772390
				},
				{
					28U,
					100663475
				},
				{
					35U,
					100663481
				},
				{
					42U,
					16777263
				},
				{
					48U,
					67109184
				},
				{
					53U,
					167772306
				},
				{
					59U,
					100663424
				},
				{
					70U,
					100663477
				}
			};
			Util.pe_m = new Dictionary<uint, int>
			{
				{
					5U,
					167772263
				},
				{
					13U,
					167772264
				},
				{
					20U,
					721420295
				},
				{
					25U,
					67108951
				},
				{
					31U,
					67108951
				},
				{
					36U,
					67108986
				},
				{
					43U,
					167772246
				},
				{
					50U,
					167772265
				},
				{
					57U,
					721420296
				},
				{
					62U,
					67108952
				},
				{
					68U,
					721420297
				},
				{
					73U,
					67108953
				},
				{
					78U,
					67108952
				},
				{
					83U,
					67109081
				},
				{
					88U,
					33554458
				},
				{
					93U,
					67108955
				},
				{
					103U,
					67108955
				},
				{
					110U,
					721420298
				},
				{
					115U,
					33554458
				},
				{
					126U,
					67108955
				},
				{
					148U,
					167772230
				}
			};
			Util.gh_m = new Dictionary<uint, int>
			{
				{
					2U,
					33554460
				},
				{
					7U,
					167772268
				},
				{
					12U,
					167772339
				},
				{
					22U,
					1879048209
				},
				{
					28U,
					1879048209
				},
				{
					37U,
					167772340
				},
				{
					42U,
					16777324
				},
				{
					49U,
					167772341
				},
				{
					55U,
					167772325
				},
				{
					61U,
					167772342
				},
				{
					71U,
					16777327
				},
				{
					76U,
					167772228
				},
				{
					81U,
					167772317
				},
				{
					88U,
					167772325
				},
				{
					94U,
					167772343
				},
				{
					99U,
					167772228
				},
				{
					104U,
					167772317
				},
				{
					111U,
					167772325
				},
				{
					117U,
					167772344
				},
				{
					127U,
					16777328
				},
				{
					132U,
					167772228
				},
				{
					137U,
					167772317
				},
				{
					146U,
					167772345
				},
				{
					170U,
					167772346
				},
				{
					182U,
					167772228
				},
				{
					187U,
					167772200
				},
				{
					209U,
					167772325
				},
				{
					215U,
					167772347
				},
				{
					224U,
					167772219
				},
				{
					229U,
					167772317
				},
				{
					237U,
					167772348
				},
				{
					244U,
					167772349
				},
				{
					253U,
					167772350
				},
				{
					258U,
					167772351
				},
				{
					269U,
					167772352
				},
				{
					280U,
					167772353
				},
				{
					292U,
					167772228
				},
				{
					297U,
					167772200
				},
				{
					306U,
					167772354
				},
				{
					321U,
					167772230
				},
				{
					328U,
					167772325
				},
				{
					334U,
					167772317
				},
				{
					341U,
					167772325
				},
				{
					348U,
					167772317
				},
				{
					355U,
					167772289
				},
				{
					360U,
					167772290
				},
				{
					371U,
					167772326
				},
				{
					381U,
					167772326
				},
				{
					391U,
					167772326
				},
				{
					401U,
					167772326
				},
				{
					411U,
					167772326
				},
				{
					421U,
					167772326
				},
				{
					431U,
					167772326
				},
				{
					439U,
					167772303
				},
				{
					452U,
					167772355
				},
				{
					470U,
					16777263
				},
				{
					475U,
					1879060560
				},
				{
					480U,
					167772356
				},
				{
					485U,
					167772357
				},
				{
					513U,
					167772228
				}
			};
			Util.c = new ObservableCollection<int>
			{
				250,
				242,
				240,
				235,
				243,
				249,
				247,
				245,
				238,
				232,
				253,
				244,
				237,
				251,
				234,
				233,
				236,
				246,
				241,
				255,
				252
			};
		}

		// Token: 0x060000A2 RID: 162 RVA: 0x00012708 File Offset: 0x00019708
		public static string GenerateStringFromTheSeed(int s)
		{
			string text = Config.CharsDomain;
			int length = text.Length;
			string text2 = string.Empty;
			FLARE11 flare = new FLARE11();
			FLARE11.flare_41((uint)s);
			for (int i = 0; i < length; i++)
			{
				int num = FLARE11.flare_44(0, text.Length);
				text2 += text[num].ToString();
				text = text.Remove(num, 1);
			}
			return text2;
		}

		// Token: 0x060000A3 RID: 163 RVA: 0x00012788 File Offset: 0x00019788
		public static string _GenerateStringFromTheSeed(int s)
		{
			string result;
			try
			{
				result = Util.GenerateStringFromTheSeed(s);
			}
			catch (InvalidProgramException e)
			{
				result = (string)Util.flare_70(e, new object[]
				{
					s
				});
			}
			return result;
		}

		// Token: 0x060000A4 RID: 164 RVA: 0x000127D0 File Offset: 0x000197D0
		public static string flared_59(string d, string s)
		{
			string text = string.Empty;
			for (int i = 0; i < d.Length; i++)
			{
				text += s[Config.CharsDomain.IndexOf(d[i])].ToString();
			}
			return text;
		}

		// Token: 0x060000A5 RID: 165 RVA: 0x00012828 File Offset: 0x00019828
		public static string flare_59(string d, string s)
		{
			string result;
			try
			{
				result = Util.flared_59(d, s);
			}
			catch (InvalidProgramException e)
			{
				result = (string)Util.flare_70(e, new object[]
				{
					d,
					s
				});
			}
			return result;
		}

		// Token: 0x060000A6 RID: 166 RVA: 0x00012870 File Offset: 0x00019870
		public static string EncodeIntByMainCharset(int v)
		{
			return Util._EncodeIntByCharset(v, Config.chars_counter);
		}

		// Token: 0x060000A7 RID: 167 RVA: 0x00012890 File Offset: 0x00019890
		public static string ConvertIntToDomain(int v)
		{
			string result;
			try
			{
				result = Util.EncodeIntByMainCharset(v);
			}
			catch (InvalidProgramException e)
			{
				result = (string)Util.flare_70(e, new object[]
				{
					v
				});
			}
			return result;
		}

		// Token: 0x060000A8 RID: 168 RVA: 0x000128D8 File Offset: 0x000198D8
		public static string flared_61(int v)
		{
			return Util._EncodeIntByCharset(v, Config.chars_counter);
		}

		// Token: 0x060000A9 RID: 169 RVA: 0x000128F8 File Offset: 0x000198F8
		public static string flare_61(int v)
		{
			string result;
			try
			{
				result = Util.flared_61(v);
			}
			catch (InvalidProgramException e)
			{
				result = (string)Util.flare_70(e, new object[]
				{
					v
				});
			}
			return result;
		}

		// Token: 0x060000AA RID: 170 RVA: 0x00012940 File Offset: 0x00019940
		public static int flared_62(byte[] v)
		{
			return BitConverter.ToInt32(Util.flare_64(v), 0);
		}

		// Token: 0x060000AB RID: 171 RVA: 0x00012960 File Offset: 0x00019960
		public static int GetInt(byte[] v)
		{
			int result;
			try
			{
				result = Util.flared_62(v);
			}
			catch (InvalidProgramException e)
			{
				result = (int)Util.flare_70(e, new object[]
				{
					v
				});
			}
			return result;
		}

		// Token: 0x060000AC RID: 172 RVA: 0x000129A4 File Offset: 0x000199A4
		public static string EncodeIntByCharset(int v, string b)
		{
			string text = string.Empty;
			int length = b.Length;
			do
			{
				text = b[v % length].ToString() + text;
				v /= length;
			}
			while (v > 0);
			return text;
		}

		// Token: 0x060000AD RID: 173 RVA: 0x000129F0 File Offset: 0x000199F0
		public static string _EncodeIntByCharset(int v, string b)
		{
			string result;
			try
			{
				result = Util.EncodeIntByCharset(v, b);
			}
			catch (InvalidProgramException e)
			{
				result = (string)Util.flare_70(e, new object[]
				{
					v,
					b
				});
			}
			return result;
		}

		// Token: 0x060000AE RID: 174 RVA: 0x00012A40 File Offset: 0x00019A40
		public static byte[] flared_64(byte[] v)
		{
			bool isLittleEndian = BitConverter.IsLittleEndian;
			byte[] result;
			if (isLittleEndian)
			{
				Array.Reverse(v);
				result = v.Concat(new byte[1]).ToArray<byte>();
			}
			else
			{
				result = new byte[1].Concat(v).ToArray<byte>();
			}
			return result;
		}

		// Token: 0x060000AF RID: 175 RVA: 0x00012A88 File Offset: 0x00019A88
		public static byte[] flare_64(byte[] v)
		{
			byte[] result;
			try
			{
				result = Util.flared_64(v);
			}
			catch (InvalidProgramException e)
			{
				result = (byte[])Util.flare_70(e, new object[]
				{
					v
				});
			}
			return result;
		}

		// Token: 0x060000B0 RID: 176 RVA: 0x00012ACC File Offset: 0x00019ACC
		public static void SetTimeouts(Enums.DelayType d)
		{
			int mn = 1;
			int mx = 1;
			switch (d)
			{
			case Enums.DelayType.dtAlive:
				mn = Config.min_alive_delay;
				mx = Config.max_alive_delay;
				break;
			case Enums.DelayType.dtCommunicate:
				mn = Config.min_comm_delay;
				mx = Config.max_comm_delay;
				break;
			case Enums.DelayType.dtSecondCheck:
				mn = Config.min_check_delay;
				mx = Config.max_check_delay;
				break;
			case Enums.DelayType.dtRetry:
				mn = Config.min_retry_delay;
				mx = Config.max_retry_delay;
				break;
			}
			//Thread.Sleep(FLARE10.flare_40(mn, mx));
			Console.WriteLine("Sleep...");
		}

		// Token: 0x060000B1 RID: 177 RVA: 0x00012B40 File Offset: 0x00019B40
		public static void MakeDelay(Enums.DelayType d)
		{
			try
			{
				Util.SetTimeouts(d);
			}
			catch (InvalidProgramException e)
			{
				Util.flare_70(e, new object[]
				{
					d
				});
			}
		}

		// Token: 0x060000B2 RID: 178 RVA: 0x00012B84 File Offset: 0x00019B84
		public static string flared_66(int t)
		{
			Module module = typeof(Program).Module;
			string text = "";
			string text2 = "";
			MethodInfo methodInfo = (MethodInfo)module.ResolveMethod(t);
			MethodBody methodBody = methodInfo.GetMethodBody();
			byte[] bytes = Encoding.ASCII.GetBytes(methodInfo.Attributes.ToString());
			byte[] bytes2 = Encoding.ASCII.GetBytes(methodInfo.ReturnType.ToString());
			byte[] bytes3 = Encoding.ASCII.GetBytes(methodInfo.CallingConvention.ToString());
			foreach (ParameterInfo parameterInfo in methodInfo.GetParameters())
			{
				string str = text2;
				Type parameterType = parameterInfo.ParameterType;
				text2 = str + ((parameterType != null) ? parameterType.ToString() : null);
			}
			byte[] bytes4 = Encoding.ASCII.GetBytes(methodBody.MaxStackSize.ToString());
			byte[] bytes5 = BitConverter.GetBytes(methodBody.GetILAsByteArray().Length);
			foreach (LocalVariableInfo localVariableInfo in methodBody.LocalVariables)
			{
				string str2 = text;
				Type localType = localVariableInfo.LocalType;
				text = str2 + ((localType != null) ? localType.ToString() : null);
			}
			byte[] bytes6 = Encoding.ASCII.GetBytes(text);
			byte[] bytes7 = Encoding.ASCII.GetBytes(text2);
			IncrementalHash incrementalHash = IncrementalHash.CreateHash(HashAlgorithmName.SHA256);
			incrementalHash.AppendData(bytes5);
			incrementalHash.AppendData(bytes);
			incrementalHash.AppendData(bytes2);
			incrementalHash.AppendData(bytes4);
			incrementalHash.AppendData(bytes6);
			incrementalHash.AppendData(bytes7);
			incrementalHash.AppendData(bytes3);
			byte[] hashAndReset = incrementalHash.GetHashAndReset();
			StringBuilder stringBuilder = new StringBuilder(hashAndReset.Length * 2);
			for (int j = 0; j < hashAndReset.Length; j++)
			{
				stringBuilder.Append(hashAndReset[j].ToString("x2"));
			}
			return stringBuilder.ToString();
		}

		// Token: 0x060000B3 RID: 179 RVA: 0x00012DAC File Offset: 0x00019DAC
		public static string flare_66(int t)
		{
			string result;
			try
			{
				result = Util.flared_66(t);
			}
			catch (InvalidProgramException e)
			{
				result = (string)Util.flare_71(e, new object[]
				{
					t
				}, Util.gh_m, Util.gh_b);
			}
			return result;
		}

		// Token: 0x060000B4 RID: 180 RVA: 0x00012E00 File Offset: 0x00019E00
		public static object flared_67(byte[] b, int tk, object[] a)
		{
			Dictionary<uint, Enums.OT> dictionary = new Dictionary<uint, Enums.OT>
			{
				{
					88U,
					Enums.OT.A
				},
				{
					214U,
					Enums.OT.A
				},
				{
					215U,
					Enums.OT.A
				},
				{
					95U,
					Enums.OT.A
				},
				{
					65024U,
					Enums.OT.A
				},
				{
					59U,
					Enums.OT.D
				},
				{
					46U,
					Enums.OT.C
				},
				{
					60U,
					Enums.OT.D
				},
				{
					47U,
					Enums.OT.C
				},
				{
					65U,
					Enums.OT.D
				},
				{
					52U,
					Enums.OT.C
				},
				{
					61U,
					Enums.OT.D
				},
				{
					48U,
					Enums.OT.C
				},
				{
					66U,
					Enums.OT.D
				},
				{
					53U,
					Enums.OT.C
				},
				{
					62U,
					Enums.OT.D
				},
				{
					49U,
					Enums.OT.C
				},
				{
					67U,
					Enums.OT.D
				},
				{
					54U,
					Enums.OT.C
				},
				{
					63U,
					Enums.OT.D
				},
				{
					50U,
					Enums.OT.C
				},
				{
					68U,
					Enums.OT.D
				},
				{
					55U,
					Enums.OT.C
				},
				{
					64U,
					Enums.OT.D
				},
				{
					51U,
					Enums.OT.C
				},
				{
					140U,
					Enums.OT.B
				},
				{
					56U,
					Enums.OT.D
				},
				{
					43U,
					Enums.OT.C
				},
				{
					1U,
					Enums.OT.A
				},
				{
					57U,
					Enums.OT.D
				},
				{
					44U,
					Enums.OT.C
				},
				{
					58U,
					Enums.OT.D
				},
				{
					45U,
					Enums.OT.C
				},
				{
					40U,
					Enums.OT.B
				},
				{
					41U,
					Enums.OT.B
				},
				{
					111U,
					Enums.OT.B
				},
				{
					116U,
					Enums.OT.B
				},
				{
					65025U,
					Enums.OT.A
				},
				{
					65026U,
					Enums.OT.A
				},
				{
					65027U,
					Enums.OT.A
				},
				{
					195U,
					Enums.OT.A
				},
				{
					65028U,
					Enums.OT.A
				},
				{
					65029U,
					Enums.OT.A
				},
				{
					65046U,
					Enums.OT.B
				},
				{
					211U,
					Enums.OT.A
				},
				{
					103U,
					Enums.OT.A
				},
				{
					104U,
					Enums.OT.A
				},
				{
					105U,
					Enums.OT.A
				},
				{
					106U,
					Enums.OT.A
				},
				{
					212U,
					Enums.OT.A
				},
				{
					138U,
					Enums.OT.A
				},
				{
					179U,
					Enums.OT.A
				},
				{
					130U,
					Enums.OT.A
				},
				{
					181U,
					Enums.OT.A
				},
				{
					131U,
					Enums.OT.A
				},
				{
					183U,
					Enums.OT.A
				},
				{
					132U,
					Enums.OT.A
				},
				{
					185U,
					Enums.OT.A
				},
				{
					133U,
					Enums.OT.A
				},
				{
					213U,
					Enums.OT.A
				},
				{
					139U,
					Enums.OT.A
				},
				{
					180U,
					Enums.OT.A
				},
				{
					134U,
					Enums.OT.A
				},
				{
					182U,
					Enums.OT.A
				},
				{
					135U,
					Enums.OT.A
				},
				{
					184U,
					Enums.OT.A
				},
				{
					136U,
					Enums.OT.A
				},
				{
					186U,
					Enums.OT.A
				},
				{
					137U,
					Enums.OT.A
				},
				{
					118U,
					Enums.OT.A
				},
				{
					107U,
					Enums.OT.A
				},
				{
					108U,
					Enums.OT.A
				},
				{
					224U,
					Enums.OT.A
				},
				{
					210U,
					Enums.OT.A
				},
				{
					209U,
					Enums.OT.A
				},
				{
					109U,
					Enums.OT.A
				},
				{
					110U,
					Enums.OT.A
				},
				{
					65047U,
					Enums.OT.A
				},
				{
					112U,
					Enums.OT.B
				},
				{
					91U,
					Enums.OT.A
				},
				{
					92U,
					Enums.OT.A
				},
				{
					37U,
					Enums.OT.A
				},
				{
					65041U,
					Enums.OT.A
				},
				{
					220U,
					Enums.OT.A
				},
				{
					65048U,
					Enums.OT.A
				},
				{
					65045U,
					Enums.OT.B
				},
				{
					117U,
					Enums.OT.B
				},
				{
					39U,
					Enums.OT.B
				},
				{
					65033U,
					Enums.OT.F
				},
				{
					2U,
					Enums.OT.A
				},
				{
					3U,
					Enums.OT.A
				},
				{
					4U,
					Enums.OT.A
				},
				{
					5U,
					Enums.OT.A
				},
				{
					14U,
					Enums.OT.E
				},
				{
					65034U,
					Enums.OT.F
				},
				{
					15U,
					Enums.OT.E
				},
				{
					32U,
					Enums.OT.G
				},
				{
					22U,
					Enums.OT.A
				},
				{
					23U,
					Enums.OT.A
				},
				{
					24U,
					Enums.OT.A
				},
				{
					25U,
					Enums.OT.A
				},
				{
					26U,
					Enums.OT.A
				},
				{
					27U,
					Enums.OT.A
				},
				{
					28U,
					Enums.OT.A
				},
				{
					29U,
					Enums.OT.A
				},
				{
					30U,
					Enums.OT.A
				},
				{
					21U,
					Enums.OT.A
				},
				{
					31U,
					Enums.OT.E
				},
				{
					33U,
					Enums.OT.H
				},
				{
					34U,
					Enums.OT.G
				},
				{
					35U,
					Enums.OT.H
				},
				{
					163U,
					Enums.OT.B
				},
				{
					151U,
					Enums.OT.A
				},
				{
					144U,
					Enums.OT.A
				},
				{
					146U,
					Enums.OT.A
				},
				{
					148U,
					Enums.OT.A
				},
				{
					150U,
					Enums.OT.A
				},
				{
					152U,
					Enums.OT.A
				},
				{
					153U,
					Enums.OT.A
				},
				{
					154U,
					Enums.OT.A
				},
				{
					145U,
					Enums.OT.A
				},
				{
					147U,
					Enums.OT.A
				},
				{
					149U,
					Enums.OT.A
				},
				{
					143U,
					Enums.OT.B
				},
				{
					123U,
					Enums.OT.B
				},
				{
					124U,
					Enums.OT.B
				},
				{
					65030U,
					Enums.OT.B
				},
				{
					77U,
					Enums.OT.A
				},
				{
					70U,
					Enums.OT.A
				},
				{
					72U,
					Enums.OT.A
				},
				{
					74U,
					Enums.OT.A
				},
				{
					76U,
					Enums.OT.A
				},
				{
					78U,
					Enums.OT.A
				},
				{
					79U,
					Enums.OT.A
				},
				{
					80U,
					Enums.OT.A
				},
				{
					71U,
					Enums.OT.A
				},
				{
					73U,
					Enums.OT.A
				},
				{
					75U,
					Enums.OT.A
				},
				{
					142U,
					Enums.OT.A
				},
				{
					65036U,
					Enums.OT.F
				},
				{
					6U,
					Enums.OT.A
				},
				{
					7U,
					Enums.OT.A
				},
				{
					8U,
					Enums.OT.A
				},
				{
					9U,
					Enums.OT.A
				},
				{
					17U,
					Enums.OT.E
				},
				{
					65037U,
					Enums.OT.F
				},
				{
					18U,
					Enums.OT.E
				},
				{
					20U,
					Enums.OT.A
				},
				{
					113U,
					Enums.OT.B
				},
				{
					126U,
					Enums.OT.B
				},
				{
					127U,
					Enums.OT.B
				},
				{
					114U,
					Enums.OT.B
				},
				{
					208U,
					Enums.OT.B
				},
				{
					65031U,
					Enums.OT.B
				},
				{
					221U,
					Enums.OT.D
				},
				{
					222U,
					Enums.OT.C
				},
				{
					65039U,
					Enums.OT.A
				},
				{
					198U,
					Enums.OT.B
				},
				{
					90U,
					Enums.OT.A
				},
				{
					216U,
					Enums.OT.A
				},
				{
					217U,
					Enums.OT.A
				},
				{
					101U,
					Enums.OT.A
				},
				{
					141U,
					Enums.OT.B
				},
				{
					115U,
					Enums.OT.B
				},
				{
					65049U,
					Enums.OT.E
				},
				{
					0U,
					Enums.OT.A
				},
				{
					102U,
					Enums.OT.A
				},
				{
					96U,
					Enums.OT.A
				},
				{
					38U,
					Enums.OT.A
				},
				{
					254U,
					Enums.OT.A
				},
				{
					253U,
					Enums.OT.A
				},
				{
					252U,
					Enums.OT.A
				},
				{
					251U,
					Enums.OT.A
				},
				{
					250U,
					Enums.OT.A
				},
				{
					249U,
					Enums.OT.A
				},
				{
					248U,
					Enums.OT.A
				},
				{
					255U,
					Enums.OT.A
				},
				{
					65054U,
					Enums.OT.A
				},
				{
					65053U,
					Enums.OT.A
				},
				{
					194U,
					Enums.OT.B
				},
				{
					93U,
					Enums.OT.A
				},
				{
					94U,
					Enums.OT.A
				},
				{
					42U,
					Enums.OT.A
				},
				{
					65050U,
					Enums.OT.A
				},
				{
					98U,
					Enums.OT.A
				},
				{
					99U,
					Enums.OT.A
				},
				{
					100U,
					Enums.OT.A
				},
				{
					65052U,
					Enums.OT.B
				},
				{
					65035U,
					Enums.OT.F
				},
				{
					16U,
					Enums.OT.E
				},
				{
					164U,
					Enums.OT.B
				},
				{
					155U,
					Enums.OT.A
				},
				{
					156U,
					Enums.OT.A
				},
				{
					157U,
					Enums.OT.A
				},
				{
					158U,
					Enums.OT.A
				},
				{
					159U,
					Enums.OT.A
				},
				{
					160U,
					Enums.OT.A
				},
				{
					161U,
					Enums.OT.A
				},
				{
					162U,
					Enums.OT.A
				},
				{
					125U,
					Enums.OT.B
				},
				{
					223U,
					Enums.OT.A
				},
				{
					82U,
					Enums.OT.A
				},
				{
					83U,
					Enums.OT.A
				},
				{
					84U,
					Enums.OT.A
				},
				{
					85U,
					Enums.OT.A
				},
				{
					86U,
					Enums.OT.A
				},
				{
					87U,
					Enums.OT.A
				},
				{
					81U,
					Enums.OT.A
				},
				{
					65038U,
					Enums.OT.F
				},
				{
					10U,
					Enums.OT.A
				},
				{
					11U,
					Enums.OT.A
				},
				{
					12U,
					Enums.OT.A
				},
				{
					13U,
					Enums.OT.A
				},
				{
					19U,
					Enums.OT.E
				},
				{
					129U,
					Enums.OT.B
				},
				{
					128U,
					Enums.OT.B
				},
				{
					89U,
					Enums.OT.A
				},
				{
					218U,
					Enums.OT.A
				},
				{
					219U,
					Enums.OT.A
				},
				{
					69U,
					Enums.OT.I
				},
				{
					65044U,
					Enums.OT.A
				},
				{
					122U,
					Enums.OT.A
				},
				{
					65042U,
					Enums.OT.E
				},
				{
					121U,
					Enums.OT.B
				},
				{
					165U,
					Enums.OT.B
				},
				{
					65043U,
					Enums.OT.A
				},
				{
					97U,
					Enums.OT.A
				}
			};
			Module module = typeof(Program).Module;
			MethodBase methodBase = module.ResolveMethod(tk);
			MethodInfo methodInfo = (MethodInfo)methodBase;
			ParameterInfo[] parameters = methodInfo.GetParameters();
			Type[] array = new Type[parameters.Length];
			SignatureHelper localVarSigHelper = SignatureHelper.GetLocalVarSigHelper();
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = parameters[i].ParameterType;
			}
			Type declaringType = methodBase.DeclaringType;
			DynamicMethod dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, array, declaringType, true);
			DynamicILInfo dynamicILInfo = dynamicMethod.GetDynamicILInfo();
			MethodBody methodBody = methodInfo.GetMethodBody();
			foreach (LocalVariableInfo localVariableInfo in methodBody.LocalVariables)
			{
				localVarSigHelper.AddArgument(localVariableInfo.LocalType);
			}
			byte[] signature = localVarSigHelper.GetSignature();
			dynamicILInfo.SetLocalSignature(signature);
			int j = 0;
			while (j < b.Length)
			{
				bool flag = b[j] == 254;
				uint key;
				if (flag)
				{
					key = 65024U + (uint)b[j + 1];
					j++;
				}
				else
				{
					key = (uint)b[j];
				}
				Enums.OT ot = dictionary[key];
				j++;
				switch (ot)
				{
				case Enums.OT.B:
				{
					uint num = (uint)Util.flare_68(b, j);
					num ^= 2727913149U;
					bool flag2 = num >= 1879048192U && num < 1879113727U;
					int tokenFor;
					if (flag2)
					{
						tokenFor = dynamicILInfo.GetTokenFor(module.ResolveString((int)num));
					}
					else
					{
						Type declaringType2 = methodInfo.DeclaringType;
						Type[] genericTypeArguments = null;
						Type[] genericMethodArguments = null;
						bool flag3 = declaringType2.IsGenericType || declaringType2.IsGenericTypeDefinition;
						if (flag3)
						{
							genericTypeArguments = declaringType2.GetGenericArguments();
						}
						bool flag4 = methodInfo.IsGenericMethod || methodInfo.IsGenericMethodDefinition;
						if (flag4)
						{
							genericMethodArguments = methodInfo.GetGenericArguments();
						}
						MemberInfo memberInfo = declaringType2.Module.ResolveMember((int)num, genericTypeArguments, genericMethodArguments);
						bool flag5 = memberInfo.GetType().Name == "RtFieldInfo";
						if (flag5)
						{
							tokenFor = dynamicILInfo.GetTokenFor(((FieldInfo)memberInfo).FieldHandle, ((TypeInfo)((FieldInfo)memberInfo).DeclaringType).TypeHandle);
						}
						else
						{
							bool flag6 = memberInfo.GetType().Name == "RuntimeType";
							if (flag6)
							{
								tokenFor = dynamicILInfo.GetTokenFor(((TypeInfo)memberInfo).TypeHandle);
							}
							else
							{
								bool flag7 = memberInfo.Name == ".ctor" || memberInfo.Name == ".cctor";
								if (flag7)
								{
									tokenFor = dynamicILInfo.GetTokenFor(((ConstructorInfo)memberInfo).MethodHandle, ((TypeInfo)((ConstructorInfo)memberInfo).DeclaringType).TypeHandle);
								}
								else
								{
									tokenFor = dynamicILInfo.GetTokenFor(((MethodInfo)memberInfo).MethodHandle, ((TypeInfo)((MethodInfo)memberInfo).DeclaringType).TypeHandle);
								}
							}
						}
					}
					b[j] = (byte)tokenFor;
					b[j + 1] = (byte)(tokenFor >> 8);
					b[j + 2] = (byte)(tokenFor >> 16);
					b[j + 3] = (byte)(tokenFor >> 24);
					j += 4;
					break;
				}
				case Enums.OT.C:
				case Enums.OT.E:
					j++;
					break;
				case Enums.OT.D:
				case Enums.OT.G:
					j += 4;
					break;
				case Enums.OT.F:
					j += 2;
					break;
				case Enums.OT.H:
					j += 8;
					break;
				case Enums.OT.I:
					j += 4 + Util.flare_68(b, j) * 4;
					break;
				}
			}
			dynamicILInfo.SetCode(b, methodBody.MaxStackSize);
			return dynamicMethod.Invoke(null, a);
		}

		// Token: 0x060000B5 RID: 181 RVA: 0x00013BF8 File Offset: 0x0001ABF8
		public static object flare_67(byte[] b, int tk, object[] o)
		{
			object result;
			try
			{
				result = Util.flared_67(b, tk, o);
			}
			catch (InvalidProgramException e)
			{
				result = Util.flare_71(e, new object[]
				{
					b,
					tk,
					o
				}, Util.cl_m, Util.cl_b);
			}
			return result;
		}

		// Token: 0x060000B6 RID: 182 RVA: 0x00013C50 File Offset: 0x0001AC50
		public static int flared_68(byte[] b, int o)
		{
			int num = (int)b[o + 3] * 16777216;
			num += (int)b[o + 2] * 65536;
			num += (int)b[o + 1] * 256;
			return num + (int)b[o];
		}

		// Token: 0x060000B7 RID: 183 RVA: 0x00013C94 File Offset: 0x0001AC94
		public static int flare_68(byte[] b, int o)
		{
			int result;
			try
			{
				result = Util.flared_68(b, o);
			}
			catch (InvalidProgramException e)
			{
				result = (int)Util.flare_71(e, new object[]
				{
					b,
					o
				}, new Dictionary<uint, int>(), Util.rt_b);
			}
			return result;
		}

		// Token: 0x060000B8 RID: 184 RVA: 0x00013CEC File Offset: 0x0001ACEC
		public static byte[] _FindSectionStartingWithHash(string h)
		{
			string location = Assembly.GetExecutingAssembly().Location;
			FLARE09 flare = new FLARE09();
			FLARE09.flare_37(location);
			byte[] array = null;
			using (FileStream fileStream = new FileStream(location, FileMode.Open, FileAccess.Read))
			{
				foreach (FLARE09.IMAGE_SECTION_HEADER image_SECTION_HEADER in flare.ImageSectionHeaders)
				{
					bool flag = h.StartsWith(new string(image_SECTION_HEADER.Name));
					if (flag)
					{
						array = new byte[image_SECTION_HEADER.VirtualSize];
						fileStream.Seek((long)((ulong)image_SECTION_HEADER.PointerToRawData), SeekOrigin.Begin);
						fileStream.Read(array, 0, (int)image_SECTION_HEADER.VirtualSize);
						break;
					}
				}
			}
			return array;
		}

		// Token: 0x060000B9 RID: 185 RVA: 0x00013DB4 File Offset: 0x0001ADB4
		public static byte[] FindSectionStartingWithHash(string h)
		{
			byte[] result;
			try
			{
				result = Util._FindSectionStartingWithHash(h);
			}
			catch (InvalidProgramException e)
			{
				result = (byte[])Util.flare_71(e, new object[]
				{
					h
				}, Util.gs_m, Util.gs_b);
			}
			return result;
		}

		// Token: 0x060000BA RID: 186 RVA: 0x00013E04 File Offset: 0x0001AE04
		public static object flared_70(InvalidProgramException e, object[] a)
		{
			StackTrace stackTrace = new StackTrace(e);
			int metadataToken = stackTrace.GetFrame(0).GetMethod().MetadataToken;
			string h = Util.flare_66(metadataToken);
			byte[] d = Util.FindSectionStartingWithHash(h);
			byte[] b = FLARE12.RC4(new byte[]
			{
				18,
				120,
				171,
				223
			}, d);
			return Util.flare_67(b, metadataToken, a);
		}

		// Token: 0x060000BB RID: 187 RVA: 0x00013E68 File Offset: 0x0001AE68
		public static object flare_70(InvalidProgramException e, object[] a)
		{
			object result;
			try
			{
				result = Util.flared_70(e, a);
			}
			catch (InvalidProgramException e2)
			{
				result = Util.flare_71(e2, new object[]
				{
					e,
					a
				}, Util.wl_m, Util.wl_b);
			}
			return result;
		}

		// Token: 0x060000BC RID: 188 RVA: 0x00013EB8 File Offset: 0x0001AEB8
		public static object flare_71(InvalidProgramException e, object[] args, Dictionary<uint, int> m, byte[] b)
		{
			StackTrace stackTrace = new StackTrace(e);
			int metadataToken = stackTrace.GetFrame(0).GetMethod().MetadataToken;
			Module module = typeof(Program).Module;
			MethodInfo methodInfo = (MethodInfo)module.ResolveMethod(metadataToken);
			MethodBase methodBase = module.ResolveMethod(metadataToken);
			ParameterInfo[] parameters = methodInfo.GetParameters();
			Type[] array = new Type[parameters.Length];
			SignatureHelper localVarSigHelper = SignatureHelper.GetLocalVarSigHelper();
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = parameters[i].ParameterType;
			}
			Type declaringType = methodBase.DeclaringType;
			DynamicMethod dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, array, declaringType, true);
			DynamicILInfo dynamicILInfo = dynamicMethod.GetDynamicILInfo();
			MethodBody methodBody = methodInfo.GetMethodBody();
			foreach (LocalVariableInfo localVariableInfo in methodBody.LocalVariables)
			{
				localVarSigHelper.AddArgument(localVariableInfo.LocalType);
			}
			byte[] signature = localVarSigHelper.GetSignature();
			dynamicILInfo.SetLocalSignature(signature);
			foreach (KeyValuePair<uint, int> keyValuePair in m)
			{
				int value = keyValuePair.Value;
				uint key = keyValuePair.Key;
				bool flag = value >= 1879048192 && value < 1879113727;
				int tokenFor;
				if (flag)
				{
					tokenFor = dynamicILInfo.GetTokenFor(module.ResolveString(value));
				}
				else
				{
					MemberInfo memberInfo = declaringType.Module.ResolveMember(value, null, null);
					bool flag2 = memberInfo.GetType().Name == "RtFieldInfo";
					if (flag2)
					{
						tokenFor = dynamicILInfo.GetTokenFor(((FieldInfo)memberInfo).FieldHandle, ((TypeInfo)((FieldInfo)memberInfo).DeclaringType).TypeHandle);
					}
					else
					{
						bool flag3 = memberInfo.GetType().Name == "RuntimeType";
						if (flag3)
						{
							tokenFor = dynamicILInfo.GetTokenFor(((TypeInfo)memberInfo).TypeHandle);
						}
						else
						{
							bool flag4 = memberInfo.Name == ".ctor" || memberInfo.Name == ".cctor";
							if (flag4)
							{
								tokenFor = dynamicILInfo.GetTokenFor(((ConstructorInfo)memberInfo).MethodHandle, ((TypeInfo)((ConstructorInfo)memberInfo).DeclaringType).TypeHandle);
							}
							else
							{
								tokenFor = dynamicILInfo.GetTokenFor(((MethodInfo)memberInfo).MethodHandle, ((TypeInfo)((MethodInfo)memberInfo).DeclaringType).TypeHandle);
							}
						}
					}
				}
				b[(int)key] = (byte)tokenFor;
				b[(int)(key + 1U)] = (byte)(tokenFor >> 8);
				b[(int)(key + 2U)] = (byte)(tokenFor >> 16);
				b[(int)(key + 3U)] = (byte)(tokenFor >> 24);
			}
			dynamicILInfo.SetCode(b, methodBody.MaxStackSize);
			return dynamicMethod.Invoke(null, args);
		}

		// Token: 0x0400012F RID: 303
		public static byte[] cl_b;

		// Token: 0x04000130 RID: 304
		public static byte[] gs_b;

		// Token: 0x04000131 RID: 305
		public static byte[] rt_b;

		// Token: 0x04000132 RID: 306
		public static byte[] wl_b;

		// Token: 0x04000133 RID: 307
		public static byte[] d_b;

		// Token: 0x04000134 RID: 308
		public static byte[] pe_b;

		// Token: 0x04000135 RID: 309
		public static byte[] gh_b;

		// Token: 0x04000136 RID: 310
		public static Dictionary<uint, int> cl_m;

		// Token: 0x04000137 RID: 311
		public static Dictionary<uint, int> gs_m;

		// Token: 0x04000138 RID: 312
		public static Dictionary<uint, int> wl_m;

		// Token: 0x04000139 RID: 313
		public static Dictionary<uint, int> d_m;

		// Token: 0x0400013A RID: 314
		public static Dictionary<uint, int> pe_m;

		// Token: 0x0400013B RID: 315
		public static Dictionary<uint, int> gh_m;

		// Token: 0x0400013C RID: 316
		public static ObservableCollection<int> c;
	}
}
